@model MoostBrand.DAL.Requisition

@{
    ViewBag.Title = "Edit";
}


@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()

    <div class="panel-heading">
        <h4 class="panel-title">Edit Reservations</h4>
    </div>
    <div class="panel-body">

        <div class="form-horizontal">

            <div class="form-group">
                <label class="control-label col-md-2">
                    <small class="text-danger"><span class="symbol required"></span> Required Fields</small>
                </label>
            </div>

            @Html.ValidationSummary(true, "", new { @class = "text-danger" })
            @Html.HiddenFor(model => model.ID)

            <div class="form-group">
                @*@Html.LabelFor(model => model.RefNumber, htmlAttributes: new { @class = "control-label col-md-2" })*@
                <label class="control-label col-md-2">
                    Reference Number
                    <span class="symbol required"></span>
                </label>
                <div class="col-md-6">
                    @Html.EditorFor(model => model.RefNumber, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.RefNumber, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                @*@Html.LabelFor(model => model.RequestedBy, "Sales Person", htmlAttributes: new { @class = "control-label col-md-2" })*@
                <label class="control-label col-md-2">
                    Sales Person
                    <span class="symbol required"></span>
                </label>
                <div class="col-md-6">
                    @Html.DropDownList("RequestedBy", null, htmlAttributes: new { @class = "form-control" })
                    @Html.ValidationMessageFor(model => model.RequestedBy, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                @*@Html.LabelFor(model => model.RequestedDate, htmlAttributes: new { @class = "control-label col-md-2" })*@
                <label class="control-label col-md-2">
                    Requested Date
                    <span class="symbol required"></span>
                </label>
                <div class="col-md-6">
                    @Html.EditorFor(model => model.RequestedDate, new { htmlAttributes = new { @class = "form-control date-picker" } })
                    @Html.ValidationMessageFor(model => model.RequestedDate, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                @*@Html.LabelFor(model => model.LocationID, "Location of Reservation", htmlAttributes: new { @class = "control-label col-md-2" })*@
                <label class="control-label col-md-2">
                    Location of Reservation
                    <span class="symbol required"></span>
                </label>
                <div class="col-md-6">
                    @Html.DropDownList("LocationID", null, new { @class = "form-control" })
                    @Html.ValidationMessageFor(model => model.LocationID, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                @*@Html.LabelFor(model => model.DateRequired, htmlAttributes: new { @class = "control-label col-md-2" })*@
                <label class="control-label col-md-2">
                    Date Required
                    <span class="symbol required"></span>
                </label>
                <div class="col-md-6">
                    @Html.EditorFor(model => model.DateRequired, new { htmlAttributes = new { @class = "form-control date-picker" } })
                    @Html.ValidationMessageFor(model => model.DateRequired, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                @*@Html.LabelFor(model => model.Customer, htmlAttributes: new { @class = "control-label col-md-2" })*@
                <label class="control-label col-md-2">
                    Customer
                    <span class="symbol required"></span>
                </label>
                <div class="col-md-6">
                    @Html.EditorFor(model => model.Customer, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.Customer, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                @*@Html.LabelFor(model => model.ReservationTypeID, "Reservation Type", htmlAttributes: new { @class = "control-label col-md-2" })*@
                <label class="control-label col-md-2">
                    Reservation Type
                    <span class="symbol required"></span>
                </label>
                <div class="col-md-6">
                    @Html.DropDownList("ReservationTypeID", null, htmlAttributes: new { @class = "form-control" })
                    @Html.ValidationMessageFor(model => model.ReservationTypeID, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                @*@Html.LabelFor(model => model.ReservedBy, "ReservedBy", htmlAttributes: new { @class = "control-label col-md-2" })*@
                <label class="control-label col-md-2">
                    Reserved By
                    <span class="symbol required"></span>
                </label>
                <div class="col-md-6">
                    @Html.DropDownList("ReservedBy", null, htmlAttributes: new { @class = "form-control" })
                    @Html.ValidationMessageFor(model => model.ReservedBy, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                @*@Html.LabelFor(model => model.PaymentStatusID, htmlAttributes: new { @class = "control-label col-md-2" })*@
                <label class="control-label col-md-2">
                    Payment Status
                    <span class="symbol required"></span>
                </label>
                <div class="col-md-6">
                    @*@Html.EditorFor(model => model.PaymentStatus, new { htmlAttributes = new { @class = "form-control" } })*@
                    @Html.DropDownList("PaymentStatusID", null, new { @class = "form-control" })
                    @Html.ValidationMessageFor(model => model.PaymentStatusID, "", new { @class = "text-danger" })
                </div>
            </div>
            <div id="exp">
                <div class="form-group">
                    @*@Html.LabelFor(model => model.ValidityOfReservation, "Validity Of Reservation", htmlAttributes: new { @class = "control-label col-md-2" })*@
                    <label class="control-label col-md-2">
                        Validity Of Reservation
                        <span class="symbol required"></span>
                    </label>
                    <div class="col-md-6">
                        @Html.EditorFor(model => model.ValidityOfReservation, new { htmlAttributes = new { @class = "form-control date-picker" } })
                        @Html.ValidationMessageFor(model => model.ValidityOfReservation, "", new { @class = "text-danger" })
                    </div>
                </div>
            </div>


            <div class="form-group">
                @*@Html.LabelFor(model => model.InvoiceNumber, htmlAttributes: new { @class = "control-label col-md-2" })*@
                <label class="control-label col-md-2">
                    Invoice Number
                    <span class="symbol required"></span>
                </label>
                <div class="col-md-6">
                    @Html.EditorFor(model => model.InvoiceNumber, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.InvoiceNumber, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                @*@Html.LabelFor(model => model.AuthorizedPerson, htmlAttributes: new { @class = "control-label col-md-2" })*@
                <label class="control-label col-md-2">
                    Authorized Person
                    <span class="symbol required"></span>
                </label>
                <div class="col-md-6">
                    @Html.DropDownList("AuthorizedPerson", null, new { @class = "form-control" })
                    @Html.ValidationMessageFor(model => model.AuthorizedPerson, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                @*@Html.LabelFor(model => model.ValidatedBy, "ValidatedBy", htmlAttributes: new { @class = "control-label col-md-2" })*@
                <label class="control-label col-md-2">
                    Validated By
                    <span class="symbol required"></span>
                </label>
                <div class="col-md-6">
                    @Html.DropDownList("ValidatedBy", null, htmlAttributes: new { @class = "form-control" })
                    @Html.ValidationMessageFor(model => model.ValidatedBy, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                @*@Html.LabelFor(model => model.ShipmentTypeID, "ShipmentType", htmlAttributes: new { @class = "control-label col-md-2" })*@
                <label class="control-label col-md-2">
                    Shipment Type
                    <span class="symbol required"></span>
                </label>
                <div class="col-md-6">
                    @Html.DropDownList("ShipmentTypeID", null, htmlAttributes: new { @class = "form-control" })
                    @Html.ValidationMessageFor(model => model.ShipmentTypeID, "", new { @class = "text-danger" })
                </div>
            </div>

            @*<div class="form-group">
                    @Html.LabelFor(model => model.DropShipID, "DropShip", htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-6">
                        @Html.DropDownList("DropShipID", null, htmlAttributes: new { @class = "form-control" })
                        @Html.ValidationMessageFor(model => model.DropShipID, "", new { @class = "text-danger" })
                    </div>
                </div>*@

            @*<div class="form-group">
                    @Html.LabelFor(model => model.ValidityOfReservation, "Validity Of Reservation", htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-6">
                        @Html.EditorFor(model => model.ValidityOfReservation, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.ValidityOfReservation, "", new { @class = "text-danger" })
                    </div>
                </div>*@


            @*<div class="form-group">
                    @Html.LabelFor(model => model.Driver, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-6">
                        @Html.EditorFor(model => model.Driver, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.Driver, "", new { @class = "text-danger" })
                    </div>
                </div>*@
            <div class="form-group">
                @*@Html.LabelFor(model => model.ApprovalStatus, htmlAttributes: new { @class = "control-label col-md-2" })*@
                <label class="control-label col-md-2">
                    Approval Status
                    <span class="symbol required"></span>
                </label>
                <div class="col-md-6">
                    @Html.DropDownList("ApprovalStatus", null, new { @class = "form-control" })
                    @Html.ValidationMessageFor(model => model.ApprovalStatus, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                @*@Html.LabelFor(model => model.ApprovedBy, htmlAttributes: new { @class = "control-label col-md-2" })*@
                <label class="control-label col-md-2">
                    Approved By
                    <span class="symbol required"></span>
                </label>
                <div class="col-md-6">
                    @Html.DropDownList("ApprovedBy", null, new { @class = "form-control" })
                    @Html.ValidationMessageFor(model => model.ApprovedBy, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.Remarks, htmlAttributes: new { @class = "control-label col-md-2" })@*not required*@
                <div class="col-md-6">
                    @Html.EditorFor(model => model.Remarks, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.Remarks, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                <div class="col-md-offset-2 col-md-6">
                    <input type="button" value="Save" id="save" class="btn btn-green" />
                    <input type="submit" id="submit" value="submit" class="btn btn-default hidden" />
                    <a href='@Url.Action("Index")' class="btn btn-light-orange">
                        Back to List
                    </a>
                </div>
            </div>
        </div>

    </div>
}

@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
}

<script>

    $('#save').click(function (event) {
        var _variable = Validate();
        if (_variable == "passed") {
            $('#submit').click();
        }
        else { alert('kindly fill up required fields'); }

    });

    function Validate() {

        var _passed;
        //txtEmail
        if ($('#RefNumber').val() == '') {
            $('#RefNumber').css({ "border": "1px solid red" })
            _passed = '1';
        }
        else if ($('#RequestedBy').val() == '') {
            $('#RequestedBy').css({ "border": "1px solid red" })
            _passed = '2';
        }
        else if ($('#RequestedDate').val() == '') {
            $('#RequestedDate').css({ "border": "1px solid red" })
            _passed = '3';
        }
        else if ($('#LocationID').val() == '') {
            $('#LocationID').css({ "border": "1px solid red" })
            _passed = '4';
        }
        else if ($('#DateRequired').val() == '') {
            $('#DateRequired').css({ "border": "1px solid red" })
            _passed = '5';
        }
        else if ($('#Customer').val() == '') {
            $('#Customer').css({ "border": "1px solid red" })
            _passed = '6';
        }
        else if ($('#ReservationTypeID').val() == '') {
            $('#ReservationTypeID').css({ "border": "1px solid red" })
            _passed = '7';
        }
        else if ($('#ReservedBy').val() == '') {
            $('#ReservedBy').css({ "border": "1px solid red" })
            _passed = '8';
        }
        else if ($('#PaymentStatusID').val() == '') {
            $('#PaymentStatusID').css({ "border": "1px solid red" })
            _passed = '9';
        }
        else if ($('#ValidityOfReservation').val() == '' && $("#PaymentStatusID").val() == 1) {
            $('#ValidityOfReservation').css({ "border": "1px solid red" })
            _passed = '10';
        }
        else if ($('#InvoiceNumber').val() == '') {
            $('#InvoiceNumber').css({ "border": "1px solid red" })
            _passed = '11';
        }
        else if ($('#AuthorizedPerson').val() == '') {
            $('#AuthorizedPerson').css({ "border": "1px solid red" })
            _passed = '12';
        }
        else if ($('#ValidatedBy').val() == '') {
            $('#ValidatedBy').css({ "border": "1px solid red" })
            _passed = '13';
        }
        else if ($('#ShipmentTypeID').val() == '') {
            $('#ShipmentTypeID').css({ "border": "1px solid red" })
            _passed = '14';
        }
        else if ($('#ApprovalStatus').val() == '') {
            $('#ApprovalStatus').css({ "border": "1px solid red" })
            _passed = '15';
        }
        else if ($('#ApprovedBy').val() == '') {
            $('#ApprovedBy').css({ "border": "1px solid red" })
            _passed = '16';
        }
        else
            _passed = "passed";


        return _passed;

    }

    $('#RequestedDate').change(function () {
        var text = $(this).val();
        $(this).val(text.toUpperCase());
        if ($(this).val() != '') {
            $(this).css({ "border": "unset" })
        }
    });
    $('#DateRequired').change(function () {
        var text = $(this).val();
        $(this).val(text.toUpperCase());
        if ($(this).val() != '') {
            $(this).css({ "border": "unset" })
        }
    });
    $('#ValidityOfReservation').change(function () {
        var text = $(this).val();
        $(this).val(text.toUpperCase());
        if ($(this).val() != '') {
            $(this).css({ "border": "unset" })
        }
    });

    $('#Customer').keyup(function () {
        var text = $(this).val();
        $(this).val(text.toUpperCase());
        if ($(this).val() != '') {
            $(this).css({ "border": "unset" })
        }
    });
    $('#InvoiceNumber').keyup(function () {
        var text = $(this).val();
        $(this).val(text.toUpperCase());
        if ($(this).val() != '') {
            $(this).css({ "border": "unset" })
        }
    });
    $('#AuthorizedPerson').keyup(function () {
        var text = $(this).val();
        $(this).val(text.toUpperCase());
        if ($(this).val() != '') {
            $(this).css({ "border": "unset" })
        }
    });
    $('#Driver').keyup(function () {
        var text = $(this).val();
        $(this).val(text.toUpperCase());
        if ($(this).val() != '') {
            $(this).css({ "border": "unset" })
        }
    });
    $('#Remarks').keyup(function () {
        var text = $(this).val();
        $(this).val(text.toUpperCase());
    });

    $(function () {
        if ($("#PaymentStatusID").val() == 1) {
            $("#exp").show();
        }
        else {
            $("#exp").hide();
        }
    })

    $("#PaymentStatusID").change(function () {
        var val = this.value;
        if ($(this).val() != '') {
            $(this).css({ "border": "unset" })
        }
        if (val == 1) {
            $("#exp").show();
        }
        else {
            $("#exp").hide();
        }
    })

</script>