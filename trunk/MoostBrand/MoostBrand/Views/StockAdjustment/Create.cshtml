@model MoostBrand.DAL.StockAdjustment
<link href="~/Content/PagedList.css" rel="stylesheet" type="text/css" />
@{
    ViewBag.Title = "Create Stock Adjustment";
}
@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()
    <div class="panel-heading">
        <h4 class="panel-title">Create Stock Adjustment</h4>
    </div>
    <div class="panel-body">
        <div class="form-horizontal">

            <div class="form-group">
                <label class="control-label col-md-2">
                    <small class="text-danger"><span class="symbol required"></span> Required Fields</small>
                </label>
            </div>

            @Html.ValidationSummary(true, "", new { @class = "text-danger alert alert-danger" })

            <div class="form-group">
                @*@Html.LabelFor(model => model.No, htmlAttributes: new { @class = "control-label col-md-2" })*@
                <label class="control-label col-md-2">
                    Stock Adjustment Number
                    <span class="symbol required"></span>
                </label>
                <div class="col-md-6">
                    @Html.EditorFor(model => model.No, new { htmlAttributes = new { @class = "form-control", @readonly = "readonly" } })
                    @Html.ValidationMessageFor(model => model.No, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                @*@Html.LabelFor(model => model.Location, htmlAttributes: new { @class = "control-label col-md-2" })*@
                <label class="control-label col-md-2">
                    Location
                    <span class="symbol required"></span>
                </label>
                <div class="col-md-6">
                    @Html.DropDownList("LocationID", String.Empty)
                    @Html.ValidationMessageFor(model => model.LocationID, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                @*@Html.LabelFor(model => model.TransactionTypeID, htmlAttributes: new { @class = "control-label col-md-2" })*@
                <label class="control-label col-md-2">
                    Transaction Type
                    <span class="symbol required"></span>
                </label>
                <div class="col-md-6">
                    @Html.DropDownList("TransactionTypeID", String.Empty)
                    @Html.ValidationMessageFor(model => model.TransactionTypeID, "", new { @class = "text-danger" })
                </div>
            </div>


            <div class="form-group">
                @*@Html.LabelFor(model => model.ReferenceNo, htmlAttributes: new { @class = "control-label col-md-2" })*@
                <label class="control-label col-md-2">
                    Reference Number
                    <span class="symbol required"></span>
                </label>
                <div class="col-md-6">
                    @Html.EditorFor(model => model.ReferenceNo, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.ReferenceNo, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                @*@Html.LabelFor(model => model.PreparedBy, htmlAttributes: new { @class = "control-label col-md-2" })*@
                <label class="control-label col-md-2">
                    Prepared By
                    <span class="symbol required"></span>
                </label>
                <div class="col-md-6">
                    @Html.DropDownList("PreparedBy")
                    @Html.ValidationMessageFor(model => model.PreparedBy, "", new { @class = "text-danger" })
                </div>
            </div>
    
            <div class="form-group">
                @*@Html.LabelFor(model => model.AdjustedBy, htmlAttributes: new { @class = "control-label col-md-2" })*@
                <label class="control-label col-md-2">
                    Adjusted By
                    <span class="symbol required"></span>
                </label>
                <div class="col-md-6">
                    @Html.DropDownList("AdjustedBy", String.Empty)
                    @Html.ValidationMessageFor(model => model.AdjustedBy, "", new { @class = "text-danger" })
                </div>
            </div>


            <div class="form-group">
                @*@Html.LabelFor(model => model.ErrorDate, htmlAttributes: new { @class = "control-label col-md-2" })*@
                <label class="control-label col-md-2">
                    Error Date
                    <span class="symbol required"></span>
                </label>
                <div class="col-md-6">
                    @*Model.ErrorDate.ToString("MM/dd/yyyy")*@
                    @*@Html.EditorFor(model => model.ErrorDate, new { htmlAttributes = new { @class = "form-control" , @hidden="hidden"} })*@
                    @Html.EditorFor(model => model.ErrorDate, new { htmlAttributes = new { @class = "form-control date-picker", @Value = "" } })
                    @Html.ValidationMessageFor(model => model.ErrorDate, "", new { @class = "text-danger" })
                </div>
            </div>

           
            <div class="form-group">
                @*@Html.LabelFor(model => model.ApprovedBy, htmlAttributes: new { @class = "control-label col-md-2" })*@
                <label class="control-label col-md-2">
                    Approved By
                    <span class="symbol required"></span>
                </label>
                <div class="col-md-6">
                    @Html.DropDownList("ApprovedBy", String.Empty)
                    @Html.ValidationMessageFor(model => model.ApprovedBy, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                @*@Html.LabelFor(model => model.PostedBy, htmlAttributes: new { @class = "control-label col-md-2"})*@
                <label class="control-label col-md-2">
                    Posted By
                    <span class="symbol required"></span>
                </label>
                <div class="col-md-6">
                    @Html.DropDownList("PostedBy", String.Empty)
                    @Html.ValidationMessageFor(model => model.PostedBy, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                @*@Html.LabelFor(model => model.PostedDate, htmlAttributes: new { @class = "control-label col-md-2" })*@
                <label class="control-label col-md-2">
                    Posted Date
                    <span class="symbol required"></span>
                </label>
                <div class="col-md-6">
                    @Html.EditorFor(model => model.PostedDate, new { htmlAttributes = new { @class = "form-control date-picker", @Value = ViewBag.PostedDate } })
                    @*@Html.TextBox("PostedDate", (string)ViewBag.PostedDate)*@
                    @Html.ValidationMessageFor(model => model.PostedDate, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                @*@Html.LabelFor(model => model.Comments, htmlAttributes: new { @class = "control-label col-md-2" })*@
                <label class="control-label col-md-2">
                    Notes
                    <span class="symbol required"></span>
                </label>
                <div class="col-md-6">
                    @Html.TextAreaFor(model => model.Comments, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.Comments, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                <div class="col-md-offset-2 col-md-6">
                    <input type="submit" value="Create" id="btnCreate" class="btn btn-green hidden" />
                    <input type="button" value="Create" id="btnCreate1" class="btn btn-green" />
                    <a href='@Url.Action("Index")' class="btn btn-light-orange">
                        Back to List
                    </a>
                </div>
            </div>
        </div>
    </div>
}
<script language="javascript">

    $(document).ready(function () {

        $.ajax({
            url: "/StockAdjustment/GetNumber",
            type: "POST",
            data: "{'TransType' : '" +1+ "'}",
            contentType: "application/json; charset=utf-8",
            success: function (data) {
                $("#No").val(data);
            }

        });

    })

    $('#TransactionTypeID').change(function () {
       
      
         $.ajax({
             url: "/StockAdjustment/GetNumber",
             type: "POST",
             data: "{'TransType' : '" + $(this).val() + "'}",
             contentType: "application/json; charset=utf-8",
             success: function (data) {
                 $("#No").val(data);
             }

         });
    });

 

    $(function () {
        // add class form-control to textarea and select
        $("input[disabled]").addClass("form-control");
        $("textarea").addClass("form-control");
        $("select").addClass("form-control");
    });

       $('#TransactionTypeID').change(function () {
        var text = $(this).val();
        $(this).val(text.toUpperCase());
        if ($(this).val() != '') {
            $(this).css({ "border": "unset" })
        }
    });

    $('#ReferenceNo').change(function () {
        var text = $(this).val();
        $(this).val(text.toUpperCase());
        if ($(this).val() != '') {
            $(this).css({ "border": "unset" })
        }
    });

    $('#PreparedBy').change(function () {
        var text = $(this).val();
        $(this).val(text.toUpperCase());
        if ($(this).val() != '') {
            $(this).css({ "border": "unset" })
        }
    });

    $('#LocationID').change(function () {
        var text = $(this).val();
        $(this).val(text.toUpperCase());
        if ($(this).val() != '') {
            $(this).css({ "border": "unset" })
        }
    });

    $('#AdjustedBy').change(function () {
        var text = $(this).val();
        $(this).val(text.toUpperCase());
        if ($(this).val() != '') {
            $(this).css({ "border": "unset" })
        }
    });

    $('#ErrorDate').change(function () {
        var text = $(this).val();
        $(this).val(text.toUpperCase());
        if ($(this).val() != '') {
            $(this).css({ "border": "unset" })
        }
    });

    $('#ApprovedBy').change(function () {
        var text = $(this).val();
        $(this).val(text.toUpperCase());
        if ($(this).val() != '') {
            $(this).css({ "border": "unset" })
        }
    });

    $('#PostedBy').change(function () {
        var text = $(this).val();
        $(this).val(text.toUpperCase());
        if ($(this).val() != '') {
            $(this).css({ "border": "unset" })
        }
    });


    $('#PostedDate').change(function () {
        var text = $(this).val();
        $(this).val(text.toUpperCase());
        if ($(this).val() != '') {
            $(this).css({ "border": "unset" })
        }
    });

    $('#btnCreate1').click(function (event)
    {
        var _variable = Validate();
     
        if (_variable == "passed")
        {
            $('#btnCreate').click();
        }
    });

    function Validate() {

        var _passed;
        //txtEmail
        if ($('#TransactionTypeID').val() == '') {
            $('#TransactionTypeID').css({ "border": "1px solid red" })
            _passed = '1';

        }
        else if ($('#ReferenceNo').val() == '') {
            $('#ReferenceNo').css({ "border": "1px solid red" })
            _passed = '2';

        }
        else if ($('#PreparedBy').val() == '') {
            $('#PreparedBy').css({ "border": "1px solid red" })
            _passed = '3';

        }
        else if ($('#LocationID').val() == '') {
            $('#LocationID').css({ "border": "1px solid red" })
            _passed = '4';

        }
        else if ($('#AdjustedBy').val() == '') {
            $('#AdjustedBy').css({ "border": "1px solid red" })
            _passed = '5';

        }
        else if ($('#ErrorDate').val() == '') {
            $('#ErrorDate').css({ "border": "1px solid red" })
            _passed = '6';

        }
        else if ($('#ApprovedBy').val() == '') {
            $('#ApprovedBy').css({ "border": "1px solid red" })
            _passed = '7';

        }
        else if ($('#PostedBy').val() == '') {
            $('#PostedBy').css({ "border": "1px solid red" })
            _passed = '8';

        }
        else if ($('#PostedDate').val() == '') {
            $('#PostedDate').css({ "border": "1px solid red" })
            _passed = '9';

        }

        else
            _passed = "passed";



        return _passed;

    }
  
</script>
