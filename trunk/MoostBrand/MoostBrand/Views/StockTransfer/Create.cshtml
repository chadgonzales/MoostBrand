@model MoostBrand.DAL.StockTransfer

@{
    ViewBag.Title = "Create Stock Transfer";
}
<script src="~/Scripts/CustomJs.js"></script>
<script type="text/javascript">



    //// -Pearl
    //$(function () {
    //    var counterhelper = 2, counteroperator = 2;
    //    $('#btnAddHelper').click(function () {
    //        var wrapper = $(".input_fields_wrap");
    //        var newTextBoxDiv = $(document.createElement('div'))
    //            .attr("id", 'TextBoxDivHelper' + counterhelper)

    //        newTextBoxDiv.after().html('<div class="HelperRow container" style= "margin-top:15px"> <div class="form-group"> <label class ="control-label col-md-2"> &nbsp; </label><div ><div><div class="col-md-6"><input type="text" id="helper' + counterhelper + '" name="helper' + counterhelper + '" class="txthelper form-control" /></div></div><div class="row"><span class="DeleteHelper" style="cursor:pointer">Delete</span></div></div> </div></div>');
    //        newTextBoxDiv.appendTo(".HelperRow");
    //        counterhelper++;
    //    });

    //    $('#btnAddOperator').click(function () {

    //        var newTextBoxDiv = $(document.createElement('div'))
    //            .attr("id", 'TextBoxDivOperator' + counteroperator)

    //        newTextBoxDiv.after().html('<div class="OperatorRow container" style= "margin-top:15px"> <div class="form-group"> <label class ="control-label col-md-2"> &nbsp; </label><div ><div><div class="col-md-6"><input type="text" id="operator' + counteroperator + '" name="operator' + counteroperator + '" class="txtoperator form-control" /></div></div><div class="row"><span class="DeleteOperator">Delete</span></div></div> </div></div>');
    //        newTextBoxDiv.appendTo(".OperatorRow");
    //        counteroperator++;
    //    });

    //    $(document).on('click', '.DeleteHelper', function(){
    //        $(this).closest('.container').remove();
    //        counterhelper--;
    //    });

    //    $(document).on('click', '.DeleteOperator', function () {
    //        $(this).closest('.container').remove();
    //        counteroperator--;
    //    });
    //});

</script>

@using (Html.BeginForm("Create", "StockTransfer", FormMethod.Post))
{
    @Html.AntiForgeryToken()

    <div class="panel-heading">
        <h4 class="panel-title">Create Stock Transfer</h4>
        <hr />
    </div>
    <div class="panel-body">

        <div class="form-horizontal">

            @Html.ValidationSummary(true, "", new { @class = "text-danger alert alert-danger" })

            @*<div class="container">
                <div class="form-group">
                    @Html.LabelFor(model => model.RequisitionID, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-6">
                        @Html.DropDownList("RequisitionID", String.Empty)
                        @Html.ValidationMessageFor(model => model.RequisitionID, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.Location, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-6">
                        @Html.DropDownList("LocationID", String.Empty)
                        @Html.ValidationMessageFor(model => model.LocationID, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.TransferID, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-6">
                        @Html.EditorFor(model => model.TransferID, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.TransferID, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.STDAte, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-6">
                        @Html.EditorFor(model => model.STDAte, new { htmlAttributes = new { @class = "form-control date-picker" } })
                        @Html.ValidationMessageFor(model => model.STDAte, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.StartTime, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-6">
                        @Html.EditorFor(model => model.StartTime, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.StartTime, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.EndTime, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-6">
                        @Html.EditorFor(model => model.EndTime, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.EndTime, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.Driver, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-6">
                        @Html.EditorFor(model => model.Driver, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.Driver, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.Helper, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="HelperRow">
                        <div id="TextBoxDivHelper1">
                            <div class="col-md-6">
                                <input type="text" id="helper1" class="txthelper form-control" />
                            </div>
                        </div>
                        <div class="row">
                            <input type="button" value="+" class="btn btn-small btn-success" id="btnAddHelper" />
                        </div>
                    </div>
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.ReceivedBy, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-6">
                        @Html.DropDownList("ReceivedBy", String.Empty)
                        @Html.ValidationMessageFor(model => model.ReceivedBy, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.TimeReceived, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-6">
                        @Html.EditorFor(model => model.TimeReceived, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.TimeReceived, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.RequestedBy, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-6">
                        @Html.DropDownList("RequestedBy", String.Empty)
                        @Html.ValidationMessageFor(model => model.RequestedBy, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.ReleasedBy, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-6">
                        @Html.DropDownList("ReleasedBy", String.Empty)
                        @Html.ValidationMessageFor(model => model.ReleasedBy, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.Operator, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="OperatorRow">
                        <div id="TextBoxDivOperator1">
                            <div class="col-md-6">
                                <input type="text" id="operator1" class="txtoperator form-control" />
                            </div>
                        </div>
                        <div class="row">
                            <input type="button" value="+" class="btn btn-small btn-success" id="btnAddOperator" />
                        </div>
                    </div>
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.CounterCheckedBy, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-6">
                        @Html.DropDownList("CounterCheckedBy", String.Empty)
                        @Html.ValidationMessageFor(model => model.CounterCheckedBy, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.PostedBy, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-6">
                        @Html.DropDownList("PostedBy", String.Empty)
                        @Html.ValidationMessageFor(model => model.PostedBy, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.EncodedBy, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-6">
                        @Html.DropDownList("EncodedBy", String.Empty)
                        @Html.ValidationMessageFor(model => model.EncodedBy, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.Remarks, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-6">
                        @Html.TextAreaFor(model => model.Remarks, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.Remarks, "", new { @class = "text-danger" })
                    </div>
                </div>
            </div>*@

            @Html.EditorForModel()


            <div class="form-group">
                <div class="col-md-offset-2 col-md-6">
                    <input type="submit" value="Create" class="btn btn-green" />
                    <a href='@Url.Action("Index")' class="btn btn-light-orange">
                        Back to List
                    </a>
                </div>
            </div>

        </div>

    </div>
}


@*<script language="javascript">
$(function () {

    // add class form-control to textarea and select
    $("input[disabled]").addClass("form-control");
    $("textarea").addClass("form-control");
    $("select").addClass("form-control");

    $('.date-picker').datepicker({
        autoclose: true
    });
});

</script>*@


@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")

}
<script type="text/javascript">
    // -Pearl
    //$('#submit').click(function () {
    //    var helper = [], operator = [];

    //    $('.HelperRow').each(function (index, ele) {
    //        var lstHelper = {
    //            Name: $('.txthelper', this).val()
    //        }
    //        helper.push(lstHelper);
    //    });

    //    $('.OperatorRow').each(function (index, ele) {
    //        var lstOperator = {
    //            Name: $('.txtoperator', this).val()
    //        }
    //        operator.push(lstOperator);
    //    });

    //    var data = {
    //        RequisitionID: $('#RequisitionID option:selected').val(),
    //        LocationID: $('#LocationID option:selected').val(),
    //        TransferID: $('#TransferID').val(),
    //        STDAte: $('#STDAte').val(),
    //        StartTime: $('#StartTime').val(),
    //        EndTime: $('#EndTime').val(),
    //        Driver: $('#Driver').val(),
    //        StartTime: $('#StartTime').val(),
    //        EndTime: $('#EndTime').val(),
    //        ReceivedBy: $('#ReceivedBy option:selected').val(),
    //        TimeReceived: $('#TimeReceived').val(),
    //        RequestedBy: $('#RequestedBy option:selected').val(),
    //        ReleasedBy: $('#ReleasedBy option:selected').val(),
    //        CounterCheckedBy: $('#CounterCheckedBy option:selected').val(),
    //        PostedBy: $('#PostedBy option:selected').val(),
    //        EncodedBy: $('#EncodedBy option:selected').val(),
    //        Remarks: $('#Remarks').val(),
    //        Helpers: helper,
    //        Operators: operator

    //    }

    //    $.ajax({
    //        type: 'POST',
    //        url: '/StockTransfer/Create',
    //        data: JSON.stringify(data),
    //        contentType: 'application/json',
    //        success: function (data) {
    //            if (data.status)
    //                alert("Saved!");
    //            else
    //                alert("Error!!!!!");
    //        },
    //        error: function (error) {
    //            console.log(error);
    //        }
    //    });
    //});

    @*function GetStockTransfers(id) {
        $.get("@Url.Action("GetReceivings", "StockTransfer")/" + id, null, function (data) {
            var markup = "<option value=''></option>";
            for (var x = 0; x < data.length; x++) {
                markup += "<option value=" + data[x].ID + ">" + data[x].TransferID + "</option>";
            }
            $("#ReceivingID").html(markup).show();
        });
    }*@


    $('#LocationID').change(function () {
        _locID = $('#LocationID').val();
        var url = "/StockTransfer/GetLocationCode/";

        $.ajax({
            url: url,
            data: { locID: _locID },
            cache: false,
            type: "POST",
            success: function (data) {
                $.each(data, function (i, val) {
                    $.get("@Url.Action("GenerateSTRNumber", "StockTransfer")/STR " + val.Code + "", null, BindData);
                })
            },
            error: function (reponse) {
                alert("error : " + reponse);
            }
        });
    });

    function BindData(data) {
        $("#TransferID").val(data);
    }

    function GetLocationCode(_locID) {
        //var procemessage = "<option value='0'> Please wait...</option>";
        //$("#ddlsubcat").html(procemessage).show();
        var url = "/StockTransfer/GetLocationCode/";

        $.ajax({
            url: url,
            data: { locID: _locID },
            cache: false,
            type: "POST",
            success: function (data) {
                $.get("@Url.Action("GenerateSTRNumber", "StockTransfer")/STR - '" + data.locID + "'", null, BindData);
            },
            error: function (reponse) {
                alert("error : " + reponse);
            }
        });
    }


    //pwera lang dito 
    jQuery.validator.unobtrusive.adapters.add("dropdown", function (options) {
        if (options.element.tagName.toUpperCase() == "SELECT" && options.element.type.toUpperCase() == "SELECT-ONE") {
            options.rules["required"] = true;
            if (options.message) {
                options.messages["required"] = options.message;
            }
        }
    });

</script>


<script language="javascript">
    $(function () {
        HideOrShow(); //this calls it on load
    });

    function HideOrShow() {
        var val = $("#StockTransferTypeID").val();
        if (val == 1) { 
            $("#rc").hide();
            $("#rq").show();
        } else if (val == 2) { 
            $("#rc").show();
            $("#rq").hide();
        } else {
            $("#rc").hide();
            $("#rq").hide();
        }
    }

    $("#StockTransferTypeID").change(function () {
        HideOrShow();
    });
</script>
