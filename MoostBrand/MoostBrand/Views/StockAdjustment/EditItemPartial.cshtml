@model MoostBrand.DAL.StockAdjustmentDetail
<div class="modal-content">
    <div class="modal-header">
        <button type="button" class="close" data-dismiss="modal" aria-label="Close">
            <span aria-hidden="true">&times;</span>
        </button>
        <h4 class="modal-title">Add Item</h4>
    </div>
    @using (Html.BeginForm())
            {
        <div class="modal-body">
            @Html.AntiForgeryToken()
            @Html.ValidationSummary(true, "", new { @class = "text-danger" })
       

                <div class="form-horizontal">
                    <div class="form-group">
                        <label class="control-label col-md-2">Item Name</label>
                        <div class="col-md-8">
                            @Html.DisplayFor(model => model.GetItem)
                            @Html.HiddenFor(model => model.ItemID)
                            @Html.HiddenFor(model => model.StockAdjustmentID)
                        </div>
                    </div>
                </div>
                

            <div class="form-horizontal">
                <div class="form-group">
                    @Html.LabelFor(model => model.OldQuantity, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-8">
                        @Html.EditorFor(model => model.OldQuantity, new { htmlAttributes = new { @class = "form-control", @disabled = "disabled" } })
                        @Html.ValidationMessageFor(model => model.OldQuantity, "", new { @class = "text-danger" })
                    </div>
                </div>
            </div>
            <div class="form-horizontal">
                <div class="form-group">
                    @Html.LabelFor(model => model.NewQuantity, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-8">
                        @Html.EditorFor(model => model.NewQuantity, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.NewQuantity, "", new { @class = "text-danger" })
                    </div>
                </div>
            </div>
            <div class="form-horizontal">
                <div class="form-group">
                    @Html.LabelFor(model => model.Variance, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-8">
                        @Html.EditorFor(model => model.Variance, new { htmlAttributes = new { @class = "form-control", @disabled = "disabled" } })
                        @Html.ValidationMessageFor(model => model.Variance, "", new { @class = "text-danger" })
                    </div>
                </div>
            </div>

            <div class="form-horizontal">
                <div class="form-group">
                    @Html.LabelFor(model => model.Notes, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-8">
                        @Html.TextAreaFor(model => model.Notes, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.Notes, "", new { @class = "text-danger" })
                    </div>
                </div>
            </div>

         
        </div>
        <div class="modal-footer">
            <button type="button" class="btn btn-default" data-dismiss="modal">Close</button>
            <input type="submit" value="Save" class="btn btn-green" />
        </div>
    }
</div><!-- /.modal-content -->

<script>

    $('#NewQuantity').focusout(function () {

        var oldQty = parseInt($('#OldQuantity').val());
        var newQty = parseInt($('#NewQuantity').val());

        $('#Variance').val(newQty - oldQty);

    })
</script>